{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OTTO Dev","text":"<p>This fork of Bolt.new (oTToDev) allows you to choose the LLM that you use for each prompt! Currently, you can use OpenAI, Anthropic, Ollama, OpenRouter, Gemini, LMStudio, Mistral, xAI, HuggingFace, DeepSeek, or Groq models - and it is easily extended to use any other model supported by the Vercel AI SDK! See the instructions below for running this locally and extending it to include more models.</p> <p>Join the community for oTToDev!</p> <p>https://thinktank.ottomator.ai</p>"},{"location":"#whats-boltnew","title":"Whats Bolt.new","text":"<p>Bolt.new is an AI-powered web development agent that allows you to prompt, run, edit, and deploy full-stack applications directly from your browser\u2014no local setup required. If you're here to build your own AI-powered web dev agent using the Bolt open source codebase, click here to get started!</p>"},{"location":"#what-makes-boltnew-different","title":"What Makes Bolt.new Different","text":"<p>Claude, v0, etc are incredible- but you can't install packages, run backends, or edit code. That\u2019s where Bolt.new stands out:</p> <ul> <li>Full-Stack in the Browser: Bolt.new integrates cutting-edge AI models with an in-browser development environment powered by StackBlitz\u2019s WebContainers. This allows you to:</li> <li>Install and run npm tools and libraries (like Vite, Next.js, and more)</li> <li>Run Node.js servers</li> <li>Interact with third-party APIs</li> <li>Deploy to production from chat</li> <li> <p>Share your work via a URL</p> </li> <li> <p>AI with Environment Control: Unlike traditional dev environments where the AI can only assist in code generation, Bolt.new gives AI models complete control over the entire  environment including the filesystem, node server, package manager, terminal, and browser console. This empowers AI agents to handle the whole app lifecycle\u2014from creation to deployment.</p> </li> </ul> <p>Whether you\u2019re an experienced developer, a PM, or a designer, Bolt.new allows you to easily build production-grade full-stack applications.</p> <p>For developers interested in building their own AI-powered development tools with WebContainers, check out the open-source Bolt codebase in this repo!</p>"},{"location":"#setup","title":"Setup","text":"<p>Many of you are new users to installing software from Github. If you have any installation troubles reach out and submit an \"issue\" using the links above, or feel free to enhance this documentation by forking, editing the instructions, and doing a pull request.</p> <ol> <li> <p>Install Git from https://git-scm.com/downloads</p> </li> <li> <p>Install Node.js from https://nodejs.org/en/download/ </p> </li> </ol> <p>Pay attention to the installer notes after completion. </p> <p>On all operating systems, the path to Node.js should automatically be added to your system path. But you can check your path if you want to be sure. On Windows, you can search for \"edit the system environment variables\" in your system, select \"Environment Variables...\" once you are in the system properties, and then check for a path to Node in your \"Path\" system variable. On a Mac or Linux machine, it will tell you to check if /usr/local/bin is in your $PATH. To determine if usr/local/bin is included in $PATH\u00a0open your Terminal and run:</p> <pre><code>echo $PATH\u00a0.\n</code></pre> <p>If you see usr/local/bin in the output then you're good to go.</p> <ol> <li>Clone the repository (if you haven't already) by opening a Terminal window (or CMD with admin permissions) and then typing in this:</li> </ol> <pre><code>git clone https://github.com/coleam00/bolt.new-any-llm.git\n</code></pre> <ol> <li>Rename .env.example to .env.local and add your LLM API keys. You will find this file on a Mac at \"[your name]/bold.new-any-llm/.env.example\". For Windows and Linux the path will be similar.</li> </ol> <p></p> <p>If you can't see the file indicated above, its likely you can't view hidden files. On Mac, open a Terminal window and enter this command below. On Windows, you will see the hidden files option in File Explorer Settings. A quick Google search will help you if you are stuck here.</p> <pre><code>defaults write com.apple.finder AppleShowAllFiles YES\n</code></pre> <p>NOTE: you only have to set the ones you want to use and Ollama doesn't need an API key because it runs locally on your computer:</p> <p>Get your GROQ API Key here: https://console.groq.com/keys</p> <p>Get your Open AI API Key by following these instructions: https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key</p> <p>Get your Anthropic API Key in your account settings: https://console.anthropic.com/settings/keys</p> <pre><code>GROQ_API_KEY=XXX\nOPENAI_API_KEY=XXX\nANTHROPIC_API_KEY=XXX\n</code></pre> <p>Optionally, you can set the debug level:</p> <pre><code>VITE_LOG_LEVEL=debug\n</code></pre> <p>Important: Never commit your <code>.env.local</code> file to version control. It's already included in .gitignore.</p>"},{"location":"#run-with-docker","title":"Run with Docker","text":"<p>Prerequisites:</p> <p>Git and Node.js as mentioned above, as well as Docker: https://www.docker.com/</p>"},{"location":"#1a-using-helper-scripts","title":"1a. Using Helper Scripts","text":"<p>NPM scripts are provided for convenient building:</p> <pre><code># Development build\nnpm run dockerbuild\n\n# Production build\nnpm run dockerbuild:prod\n</code></pre>"},{"location":"#1b-direct-docker-build-commands-alternative-to-using-npm-scripts","title":"1b. Direct Docker Build Commands (alternative to using NPM scripts)","text":"<p>You can use Docker's target feature to specify the build environment instead of using NPM scripts if you wish:</p> <pre><code># Development build\ndocker build . --target bolt-ai-development\n\n# Production build\ndocker build . --target bolt-ai-production\n</code></pre>"},{"location":"#2-docker-compose-with-profiles-to-run-the-container","title":"2. Docker Compose with Profiles to Run the Container","text":"<p>Use Docker Compose profiles to manage different environments:</p> <pre><code># Development environment\ndocker-compose --profile development up\n\n# Production environment\ndocker-compose --profile production up\n</code></pre> <p>When you run the Docker Compose command with the development profile, any changes you make on your machine to the code will automatically be reflected in the site running on the container (i.e. hot reloading still applies!).</p>"},{"location":"#run-without-docker","title":"Run Without Docker","text":"<ol> <li>Install dependencies using Terminal (or CMD in Windows with admin permissions):</li> </ol> <pre><code>pnpm install\n</code></pre> <p>If you get an error saying \"command not found: pnpm\" or similar, then that means pnpm isn't installed. You can install it via this:</p> <pre><code>sudo npm install -g pnpm\n</code></pre> <ol> <li>Start the application with the command:</li> </ol> <pre><code>pnpm run dev\n</code></pre>"},{"location":"#super-important-note-on-running-ollama-models","title":"Super Important Note on Running Ollama Models","text":"<p>Ollama models by default only have 2048 tokens for their context window. Even for large models that can easily handle way more. This is not a large enough window to handle the Bolt.new/oTToDev prompt! You have to create a version of any model you want to use where you specify a larger context window. Luckily it's super easy to do that.</p> <p>All you have to do is:</p> <ul> <li>Create a file called \"Modelfile\" (no file extension) anywhere on your computer</li> <li>Put in the two lines:</li> </ul> <pre><code>FROM [Ollama model ID such as qwen2.5-coder:7b]\nPARAMETER num_ctx 32768\n</code></pre> <ul> <li>Run the command: </li> </ul> <pre><code>ollama create -f Modelfile [your new model ID, can be whatever you want (example: qwen2.5-coder-extra-ctx:7b)]\n</code></pre> <p>Now you have a new Ollama model that isn't heavily limited in the context length like Ollama models are by default for some reason. You'll see this new model in the list of Ollama models along with all the others you pulled!</p>"},{"location":"#adding-new-llms","title":"Adding New LLMs:","text":"<p>To make new LLMs available to use in this version of Bolt.new, head on over to <code>app/utils/constants.ts</code> and find the constant MODEL_LIST. Each element in this array is an object that has the model ID for the name (get this from the provider's API documentation), a label for the frontend model dropdown, and the provider. </p> <p>By default, Anthropic, OpenAI, Groq, and Ollama are implemented as providers, but the YouTube video for this repo covers how to extend this to work with more providers if you wish!</p> <p>When you add a new model to the MODEL_LIST array, it will immediately be available to use when you run the app locally or reload it. For Ollama models, make sure you have the model installed already before trying to use it here!</p>"},{"location":"#available-scripts","title":"Available Scripts","text":"<ul> <li><code>pnpm run dev</code>: Starts the development server.</li> <li><code>pnpm run build</code>: Builds the project.</li> <li><code>pnpm run start</code>: Runs the built application locally using Wrangler Pages. This script uses <code>bindings.sh</code> to set up necessary bindings so you don't have to duplicate environment variables.</li> <li><code>pnpm run preview</code>: Builds the project and then starts it locally, useful for testing the production build. Note, HTTP streaming currently doesn't work as expected with <code>wrangler pages dev</code>.</li> <li><code>pnpm test</code>: Runs the test suite using Vitest.</li> <li><code>pnpm run typecheck</code>: Runs TypeScript type checking.</li> <li><code>pnpm run typegen</code>: Generates TypeScript types using Wrangler.</li> <li><code>pnpm run deploy</code>: Builds the project and deploys it to Cloudflare Pages.</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To start the development server:</p> <pre><code>pnpm run dev\n</code></pre> <p>This will start the Remix Vite development server. You will need Google Chrome Canary to run this locally if you use Chrome! It's an easy install and a good browser for web development anyway.</p>"},{"location":"#tips-and-tricks","title":"Tips and Tricks","text":"<p>Here are some tips to get the most out of Bolt.new:</p> <ul> <li> <p>Be specific about your stack: If you want to use specific frameworks or libraries (like Astro, Tailwind, ShadCN, or any other popular JavaScript framework), mention them in your initial prompt to ensure Bolt scaffolds the project accordingly.</p> </li> <li> <p>Use the enhance prompt icon: Before sending your prompt, try clicking the 'enhance' icon to have the AI model help you refine your prompt, then edit the results before submitting.</p> </li> <li> <p>Scaffold the basics first, then add features: Make sure the basic structure of your application is in place before diving into more advanced functionality. This helps Bolt understand the foundation of your project and ensure everything is wired up right before building out more advanced functionality.</p> </li> <li> <p>Batch simple instructions: Save time by combining simple instructions into one message. For example, you can ask Bolt to change the color scheme, add mobile responsiveness, and restart the dev server, all in one go saving you time and reducing API credit consumption significantly.</p> </li> </ul>"},{"location":"CONTRIBUTING/","title":"Contribution Guidelines","text":""},{"location":"CONTRIBUTING/#default_num_ctx","title":"DEFAULT_NUM_CTX","text":"<p>The <code>DEFAULT_NUM_CTX</code> environment variable can be used to limit the maximum number of context values used by the qwen2.5-coder model. For example, to limit the context to 24576 values (which uses 32GB of VRAM), set <code>DEFAULT_NUM_CTX=24576</code> in your <code>.env.local</code> file.</p> <p>First off, thank you for considering contributing to Bolt.new! This fork aims to expand the capabilities of the original project by integrating multiple LLM providers and enhancing functionality. Every contribution helps make Bolt.new a better tool for developers worldwide.</p>"},{"location":"CONTRIBUTING/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>How Can I Contribute?</li> <li>Pull Request Guidelines</li> <li>Coding Standards</li> <li>Development Setup</li> <li>Deploymnt with Docker</li> </ul>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by our Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to the project maintainers.</p>"},{"location":"CONTRIBUTING/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"CONTRIBUTING/#reporting-bugs-and-feature-requests","title":"\ud83d\udc1e Reporting Bugs and Feature Requests","text":"<ul> <li>Check the issue tracker to avoid duplicates</li> <li>Use the issue templates when available</li> <li>Include as much relevant information as possible</li> <li>For bugs, add steps to reproduce the issue</li> </ul>"},{"location":"CONTRIBUTING/#code-contributions","title":"\ud83d\udd27 Code Contributions","text":"<ol> <li>Fork the repository</li> <li>Create a new branch for your feature/fix</li> <li>Write your code</li> <li>Submit a pull request</li> </ol>"},{"location":"CONTRIBUTING/#becoming-a-core-contributor","title":"\u2728 Becoming a Core Contributor","text":"<p>We're looking for dedicated contributors to help maintain and grow this project. If you're interested in becoming a core contributor, please fill out our Contributor Application Form.</p>"},{"location":"CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":""},{"location":"CONTRIBUTING/#pr-checklist","title":"\ud83d\udcdd PR Checklist","text":"<ul> <li>[ ] Branch from the main branch</li> <li>[ ] Update documentation if needed</li> <li>[ ] Manually verify all new functionality works as expected</li> <li>[ ] Keep PRs focused and atomic</li> </ul>"},{"location":"CONTRIBUTING/#review-process","title":"\ud83d\udc40 Review Process","text":"<ol> <li>Manually test the changes</li> <li>At least one maintainer review required</li> <li>Address all review comments</li> <li>Maintain clean commit history</li> </ol>"},{"location":"CONTRIBUTING/#coding-standards","title":"Coding Standards","text":""},{"location":"CONTRIBUTING/#general-guidelines","title":"\ud83d\udcbb General Guidelines","text":"<ul> <li>Follow existing code style</li> <li>Comment complex logic</li> <li>Keep functions focused and small</li> <li>Use meaningful variable names</li> </ul>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":""},{"location":"CONTRIBUTING/#initial-setup","title":"\ud83d\udd04 Initial Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/coleam00/bolt.new-any-llm.git\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>Set up environment variables:</p> </li> <li>Rename <code>.env.example</code> to <code>.env.local</code></li> <li>Add your LLM API keys (only set the ones you plan to use): <pre><code>GROQ_API_KEY=XXX\nHuggingFace_API_KEY=XXX\nOPENAI_API_KEY=XXX\nANTHROPIC_API_KEY=XXX\n...\n</code></pre></li> <li> <p>Optionally set debug level: <pre><code>VITE_LOG_LEVEL=debug\n</code></pre></p> </li> <li> <p>Optionally set context size: <pre><code>DEFAULT_NUM_CTX=32768\n</code></pre></p> </li> </ol> <p>Some Example Context Values for the qwen2.5-coder:32b models are.</p> <ul> <li>DEFAULT_NUM_CTX=32768 - Consumes 36GB of VRAM</li> <li>DEFAULT_NUM_CTX=24576 - Consumes 32GB of VRAM</li> <li>DEFAULT_NUM_CTX=12288 - Consumes 26GB of VRAM</li> <li>DEFAULT_NUM_CTX=6144 - Consumes 24GB of VRAM</li> </ul> <p>Important: Never commit your <code>.env.local</code> file to version control. It's already included in .gitignore.</p>"},{"location":"CONTRIBUTING/#running-the-development-server","title":"\ud83d\ude80 Running the Development Server","text":"<pre><code>pnpm run dev\n</code></pre> <p>Note: You will need Google Chrome Canary to run this locally if you use Chrome! It's an easy install and a good browser for web development anyway.</p>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>Run the test suite with:</p> <pre><code>pnpm test\n</code></pre>"},{"location":"CONTRIBUTING/#deployment","title":"Deployment","text":"<p>To deploy the application to Cloudflare Pages:</p> <pre><code>pnpm run deploy\n</code></pre> <p>Make sure you have the necessary permissions and Wrangler is correctly configured for your Cloudflare account.</p>"},{"location":"CONTRIBUTING/#docker-deployment-documentation","title":"Docker Deployment Documentation","text":"<p>This guide outlines various methods for building and deploying the application using Docker.</p>"},{"location":"CONTRIBUTING/#build-methods","title":"Build Methods","text":""},{"location":"CONTRIBUTING/#1-using-helper-scripts","title":"1. Using Helper Scripts","text":"<p>NPM scripts are provided for convenient building:</p> <pre><code># Development build\nnpm run dockerbuild\n\n# Production build\nnpm run dockerbuild:prod\n</code></pre>"},{"location":"CONTRIBUTING/#2-direct-docker-build-commands","title":"2. Direct Docker Build Commands","text":"<p>You can use Docker's target feature to specify the build environment:</p> <pre><code># Development build\ndocker build . --target bolt-ai-development\n\n# Production build\ndocker build . --target bolt-ai-production\n</code></pre>"},{"location":"CONTRIBUTING/#3-docker-compose-with-profiles","title":"3. Docker Compose with Profiles","text":"<p>Use Docker Compose profiles to manage different environments:</p> <pre><code># Development environment\ndocker-compose --profile development up\n\n# Production environment\ndocker-compose --profile production up\n</code></pre>"},{"location":"CONTRIBUTING/#running-the-application","title":"Running the Application","text":"<p>After building using any of the methods above, run the container with:</p> <pre><code># Development\ndocker run -p 5173:5173 --env-file .env.local bolt-ai:development\n\n# Production\ndocker run -p 5173:5173 --env-file .env.local bolt-ai:production\n</code></pre>"},{"location":"CONTRIBUTING/#deployment-with-coolify","title":"Deployment with Coolify","text":"<p>Coolify provides a straightforward deployment process:</p> <ol> <li>Import your Git repository as a new project</li> <li>Select your target environment (development/production)</li> <li>Choose \"Docker Compose\" as the Build Pack</li> <li>Configure deployment domains</li> <li>Set the custom start command:    <pre><code>docker compose --profile production up\n</code></pre></li> <li>Configure environment variables</li> <li>Add necessary AI API keys</li> <li>Adjust other environment variables as needed</li> <li>Deploy the application</li> </ol>"},{"location":"CONTRIBUTING/#vs-code-integration","title":"VS Code Integration","text":"<p>The <code>docker-compose.yaml</code> configuration is compatible with VS Code dev containers:</p> <ol> <li>Open the command palette in VS Code</li> <li>Select the dev container configuration</li> <li>Choose the \"development\" profile from the context menu</li> </ol>"},{"location":"CONTRIBUTING/#environment-files","title":"Environment Files","text":"<p>Ensure you have the appropriate <code>.env.local</code> file configured before running the containers. This file should contain: - API keys - Environment-specific configurations - Other required environment variables</p>"},{"location":"CONTRIBUTING/#notes","title":"Notes","text":"<ul> <li>Port 5173 is exposed and mapped for both development and production environments</li> <li>Environment variables are loaded from <code>.env.local</code></li> <li>Different profiles (development/production) can be used for different deployment scenarios</li> <li>The configuration supports both local development and production deployment</li> </ul>"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#how-do-i-get-the-best-results-with-ottodev","title":"How do I get the best results with oTToDev?","text":"<ul> <li> <p>Be specific about your stack: If you want to use specific frameworks or libraries (like Astro, Tailwind, ShadCN, or any other popular JavaScript framework), mention them in your initial prompt to ensure Bolt scaffolds the project accordingly.</p> </li> <li> <p>Use the enhance prompt icon: Before sending your prompt, try clicking the 'enhance' icon to have the AI model help you refine your prompt, then edit the results before submitting.</p> </li> <li> <p>Scaffold the basics first, then add features: Make sure the basic structure of your application is in place before diving into more advanced functionality. This helps oTToDev understand the foundation of your project and ensure everything is wired up right before building out more advanced functionality.</p> </li> <li> <p>Batch simple instructions: Save time by combining simple instructions into one message. For example, you can ask oTToDev to change the color scheme, add mobile responsiveness, and restart the dev server, all in one go saving you time and reducing API credit consumption significantly.</p> </li> </ul>"},{"location":"FAQ/#how-do-i-contribute-to-ottodev","title":"How do I contribute to oTToDev?","text":"<p>Please check out our dedicated page for contributing to oTToDev here!</p>"},{"location":"FAQ/#do-you-plan-on-merging-ottodev-back-into-the-official-boltnew-repo","title":"Do you plan on merging oTToDev back into the official Bolt.new repo?","text":"<p>More news coming on this coming early next month - stay tuned!</p>"},{"location":"FAQ/#what-are-the-future-plans-for-ottodev","title":"What are the future plans for oTToDev?","text":"<p>Check out our Roadmap here!</p> <p>Lot more updates to this roadmap coming soon!</p>"},{"location":"FAQ/#why-are-there-so-many-open-issuespull-requests","title":"Why are there so many open issues/pull requests?","text":"<p>oTToDev was started simply to showcase how to edit an open source project and to do something cool with local LLMs on my (@ColeMedin) YouTube channel! However, it quickly grew into a massive community project that I am working hard to keep up with the demand of by forming a team of maintainers and getting as many people involved as I can. That effort is going well and all of our maintainers are ABSOLUTE rockstars, but it still takes time to organize everything so we can efficiently get through all the issues and PRs. But rest assured, we are working hard and even working on some partnerships behind the scenes to really help this project take off!</p>"},{"location":"FAQ/#how-do-local-llms-fair-compared-to-larger-models-like-claude-35-sonnet-for-ottodevboltnew","title":"How do local LLMs fair compared to larger models like Claude 3.5 Sonnet for oTToDev/Bolt.new?","text":"<p>As much as the gap is quickly closing between open source and massive close source models, you\u2019re still going to get the best results with the very large models like GPT-4o, Claude 3.5 Sonnet, and DeepSeek Coder V2 236b. This is one of the big tasks we have at hand - figuring out how to prompt better, use agents, and improve the platform as a whole to make it work better for even the smaller local LLMs!</p>"},{"location":"FAQ/#im-getting-the-error-there-was-an-error-processing-this-request","title":"I'm getting the error: \"There was an error processing this request\"","text":"<p>If you see this error within oTToDev, that is just the application telling you there is a problem at a high level, and this could mean a number of different things. To find the actual error, please check BOTH the terminal where you started the application (with Docker or pnpm) and the developer console in the browser. For most browsers, you can access the developer console by pressing F12 or right clicking anywhere in the browser and selecting \u201cInspect\u201d. Then go to the \u201cconsole\u201d tab in the top right.</p>"},{"location":"FAQ/#im-getting-the-error-x-api-key-header-missing","title":"I'm getting the error: \"x-api-key header missing\"","text":"<p>We have seen this error a couple times and for some reason just restarting the Docker container has fixed it. This seems to be Ollama specific. Another thing to try is try to run oTToDev with Docker or pnpm, whichever you didn\u2019t run first. We are still on the hunt for why this happens once and a while!</p>"},{"location":"FAQ/#im-getting-a-blank-preview-when-ottodev-runs-my-app","title":"I'm getting a blank preview when oTToDev runs my app!","text":"<p>We promise you that we are constantly testing new PRs coming into oTToDev and the preview is core functionality, so the application is not broken! When you get a blank preview or don\u2019t get a preview, this is generally because the LLM hallucinated bad code or incorrect commands. We are working on making this more transparent so it is obvious. Sometimes the error will appear in developer console too so check that as well.</p>"},{"location":"FAQ/#everything-works-but-the-results-are-bad","title":"Everything works but the results are bad","text":"<p>This goes to the point above about how local LLMs are getting very powerful but you still are going to see better (sometimes much better) results with the largest LLMs like GPT-4o, Claude 3.5 Sonnet, and DeepSeek Coder V2 236b. If you are using smaller LLMs like Qwen-2.5-Coder, consider it more experimental and educational at this point. It can build smaller applications really well, which is super impressive for a local LLM, but for larger scale applications you want to use the larger LLMs still!</p>"}]}